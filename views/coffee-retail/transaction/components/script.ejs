<script>

    async function getUserByAddress(address) {
        const { contract, accounts } = await authorization();
        try {
            const user = await contract.methods.getUserDetail(accounts[0].toLowerCase()).call();
            return user
        } catch (error) {
            console.error(error)
            alert("terjadi kesalahan ", error)
        }
    }

    async function confirmTransaction(kopiID) {
        const { contract, accounts } = await authorization();

        try {
            const user = await contract.methods.konfirmasiTransaksi(kopiID).send({ from: accounts[0] });
            alert("berhasil Melakukan konfirmasi")
            window.location.reload()
        } catch (error) {
            console.error(error)
            alert(`terjadi kesalahan ${error}`)
        }
    }
    async function getTransaction(type, status) {
        const { contract, accounts } = await authorization();

        const transaction = await contract.methods.getTransactionByWallet(accounts[0]).call()
        const petani = await getUserByAddress(accounts[0])
        const transaction_status = ["TERTUNDA", "TERKONFIRMASI"];
        let historyTransaction = []
        switch (type) {
            case "IN":
                for (const key of transaction) {
                    if (key.penerima === accounts[0]) {
                        historyTransaction.push(key)
                    }
                }
                document.getElementById("transaction").innerHTML = await Promise.all(historyTransaction.map(async (e) => {
                    const user = await getUserByAddress(e.pengirim)
                    if (e.penerima === accounts[0]) {
                        if (status === "TERKONFIRMASI") {

                            if (e.status == 1) {

                                return `
                                    <tr>
                                        <td>${e.produkID}</td>
                                        <td>${e.transaksiID}</td>
                                        <td>${user.nama}</td>
                                        <td>${user.alamat}</td>
                                        <td>${e.varietas}</td>
                                        <td>${e.kuantitas}</td>
                                        <td>${new Date(e.tanggalTransaksi * 1000)}</td>
                                        <td>${transaction_status[parseInt(e.status)]}</td>
                                        <td>${(parseInt(e.status) === 0  && petani.walletAddress === e.penerima) ? `<button disabled class='btn btn-primary' onclick="confirmTransaction('${e.kopiID}')">Konfirmasi</button>'` : ""}</td>
                                    </tr>
                            `
                            }
                        } else if (status === "TERTUNDA") {
                            if (e.status == 0) {
                                return `
                                    <tr>
                                        <td>${e.produkID}</td>
                                        <td>${e.transaksiID}</td>
                                        <td>${user.nama}</td>
                                        <td>${user.alamat}</td>
                                        <td>${e.varietas}</td>
                                        <td>${e.kuantitas}</td>
                                        <td>${new Date(e.tanggalTransaksi * 1000)}</td>
                                        <td>${transaction_status[parseInt(e.status)]}</td>
                                        <td>${(parseInt(e.status) === 0  && petani.walletAddress === e.penerima) ? `<button  class='btn btn-primary' onclick="confirmTransaction('${e.kopiID}')">Konfirmasi</button>'` : ""}</td>
                                    </tr>
                            `
                            }
                        } else {
                            return `
                                    <tr>
                                        <td>${e.kopiID}</td>
                                        <td>${e.transaksiID}</td>
                                        <td>${user.nama}</td>
                                        <td>${user.alamat}</td>
                                        <td>${e.varietas}</td>
                                        <td>${e.kuantitas}</td>
                                        <td>${new Date(e.tanggalTransaksi * 1000)}</td>
                                        <td>${transaction_status[parseInt(e.status)]}</td>
                                        <td>${(parseInt(e.status) === 0  && petani.walletAddress === e.penerima) ? `<button class='btn btn-primary' onclick="confirmTransaction('${e.kopiID}')">Konfirmasi</button>'` : ""}</td>
                                    </tr>
                            `
                        }
                    }

                }))
                break
            case "OUT":
                for (const key of transaction) {
                    if (key.pengirim === accounts[0]) {
                        historyTransaction.push(key)
                    }
                }
                const row = await Promise.all(historyTransaction.map(async (e) => {
                    const user = await getUserByAddress(e.penerima)
                    if (e.pengirim === accounts[0]) {
                        if (status === "TERKONFIRMASI") {
                            if (e.status == 1) {
                                return `
                                    <tr>
                                        <td>${e.kopiID}</td>
                                        <td>${e.transaksiID}</td>
                                        <td>${petani.nama}</td>
                                        <td>${petani.alamat}</td>
                                        <td>${e.varietas}</td>
                                        <td>${e.kuantitas}</td>
                                        <td>${new Date(e.tanggalTransaksi * 1000)}</td>
                                        <td>${transaction_status[parseInt(e.status)]}</td>
                                        <td>${(parseInt(e.status) === 0 && petani.walletAddress === e.penerima) ? `<button class='btn btn-primary' onclick="confirmTransaction('${e.kopiID}')">Konfirmasi</button>'` : ""}</td>
                                    </tr>
                            `
                            }

                        } else if (status === "TERTUNDA" && e.status == 0) {
                            return `
                                    <tr>
                                        <td>${e.kopiID}</td>
                                        <td>${e.transaksiID}</td>
                                       <td>${petani.nama}</td>
                                        <td>${petani.alamat}</td>
                                        <td>${e.varietas}</td>
                                        <td>${e.kuantitas}</td>
                                        <td>${new Date(e.tanggalTransaksi * 1000)}</td>
                                        <td>${transaction_status[parseInt(e.status)]}</td>
                                        <td>${(parseInt(e.status) === 0  && petani.walletAddress === e.penerima) ? `<button class='btn btn-primary' onclick="confirmTransaction('${e.kopiID}')">Konfirmasi</button>'` : ""}</td>
                                    </tr>
                            `
                        } else {
                            return `
                                    <tr>
                                        <td>${e.kopiID}</td>
                                        <td>${e.transaksiID}</td>
                                        <td>${petani.nama}</td>
                                        <td>${petani.alamat}</td>
                                        <td>${e.varietas}</td>
                                        <td>${e.kuantitas}</td>
                                        <td>${new Date(e.tanggalTransaksi * 1000)}</td>
                                        <td>${transaction_status[parseInt(e.status)]}</td>
                                        <td>${(parseInt(e.status) === 0  && petani.walletAddress === e.penerima) ? `<button class='btn btn-primary' onclick="confirmTransaction('${e.kopiID}')">Konfirmasi</button>'` : ""}</td>
                                    </tr>
                            `
                        }
                    }
                }))
                document.getElementById("transaction").innerHTML = row.toString().replace(/,/g, "");
                break
        }
    }
    // Main call
    (async () => {
        const urlParams = new URLSearchParams(window.location.search);
        const params = urlParams.get('type') || 'IN';
        const status = urlParams.get('status');
        document.getElementById("status").innerText = ` - ${status || ''}`
        document.getElementById("title").innerText = `${(params === "IN") ? "Transaksi Masuk " : "Transaksi Keluar" }`
        if(status === "TERKONFIRMASI" && params === "IN" || status === "TERTUNDA" && params === "OUT" || status === "TERKONFIRMASI" && params === "OUT") {
            document.getElementById("aksi").setAttribute("hidden", true);
        }
        await getTransaction(params, status)
    })()
</script>